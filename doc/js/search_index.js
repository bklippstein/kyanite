var search_data = {"index":{"searchIndex":["array","array2","arrayofenumerables","arrayofnumerics","arrayofstrings","calltracker","callerutils","class","dictionary","enumerable","enumerableenumerables","enumerablenumerics","enumerablestrings","falseclass","float","hash","integer","kkernel","kyanite","matrix2","nilclass","numeric","object","optimizer","orderedset","range","set","sortedset","string","symbol","testkyanitearray","testkyaniteclassutils","testkyanitedictionary","testkyaniteenumerableenumerables","testkyaniteenumerablenumerics","testkyaniteenumerablestrings","testkyaniteenumerablestructure","testkyanitehash","testkyanitematrix2","testkyanitenil","testkyanitenumeric","testkyaniteobject","testkyaniteoptimizer","testkyaniterange","testkyaniteset","testkyanitestringcast","testkyanitestringchars","testkyanitestringdiff","testkyanitestringlist","testkyanitestringmgsub","testkyanitestringnested","testkyanitestringsplit","testkyanitetree","testkyanitetruefalse","tree","treenode","trueclass","undoable","+()","+()","-()","-()","<()","<<()","<=>()","<=>()","<=>()","<=>()","<=>()","<=>()","==()","=~()","=~()",">()","[]()","[]()","[]()","[]=()","abs()","anti()","anti()","approx()","arrayize()","arrayize()","average()","average()","avg()","avg()","blank?()","blank?()","blank?()","blank?()","camelize()","camelize()","capitalize()","capitalized?()","capitalized?()","chop()","clean4view()","clean4view()","clean4view!()","clean4view!()","cleanup()","clear()","clear()","code()","collect()","column()","column_size()","combine()","compact()","compact_keys!()","compact_keys!()","compact_values!()","compact_values!()","constantize()","constantize()","content_max()","content_min()","contentclass()","count()","count_words()","count_words()","cut()","cut()","deep_copy()","delete_key()","delete_key()","delete_max()","delete_min()","delete_value()","delete_value()","demodulize()","demodulize()","diff()","diff()","distribution()","distribution()","downcase()","downcase2()","downcase2()","downcase2!()","downcase2!()","downcase?()","dup()","dup()","dup()","dup()","dup()","each()","each()","each_with_index()","empty?()","empty?()","empty?()","empty?()","enum_to_array()","enum_to_array()","eql?()","extract()","extract()","fetch_by_index()","fetch_by_index()","find()","first()","first()","first()","first()","first_key()","fixsize()","from_x()","from_x()","fuzzyget()","fuzzyget()","grep()","gsub()","gsub!()","hash()","include?()","include?()","index()","index_bracket()","index_bracket()","inspect()","invert_index()","invert_index()","is_collection?()","is_collection?()","is_collection?()","is_collection?()","is_numeric?()","is_numeric?()","join()","keys()","last()","last()","last()","last()","last_key()","length()","list_with()","list_with()","load_and_delete()","load_and_keep()","mask()","mask()","mean()","mean()","mean_arithmetric()","mean_arithmetric()","mean_geometric()","mean_geometric()","mean_harmonic()","mean_harmonic()","mgsub()","mgsub()","mycaller()","mycaller_maindir()","mysqlize()","name_of_constant()","name_of_constant()","nchar()","nchar()","nestinglevel()","nestinglevel()","new()","new()","old_include?()","order_by()","overlap()","overlap()","overlapdiff()","overlapdiff()","palindrom_rumpf()","parallel()","parallel()","pest_allkeys()","pest_see_tree()","pop()","pppest_cleanup()","prd()","prd()","print_tree()","push()","push()","push()","random()","rectangle()","rectangle()","reduce53()","reduce53()","reduce53!()","reduce53!()","reduce94()","reduce94()","reduce94!()","reduce94!()","register()","remove_task()","repeat_n_seconds()","rephrase_index()","report()","respond()","row()","row_size()","row_to_nil()","save()","score_max()","score_min()","set_column!()","set_element!()","set_row!()","setup()","shift_complement()","shift_complement()","shift_complement()","show_regexp()","show_regexp()","shuffle()","shuffle()","shuffle()","shuffle!()","shuffle!()","shuffle!()","silence_warnings()","size()","size()","smart_load_path()","split()","split_by_index()","split_by_index()","split_numeric()","split_numeric()","split_numeric()","sql_regexp_for_kommaliste()","sql_regexp_for_kommaliste()","start()","stop()","strip()","strip()","strip()","strip!()","sub()","substract()","substract()","sum()","summation()","summation()","tally_calls()","test_010_anti()","test_01_prd()","test_01_sum()","test_020_index_bracket()","test_030_mask_ungeklammert()","test_040_mask_eine_klammer()","test_050_mask_zwei_klammern()","test_060_mask_leer()","test_070_mask_start_mit_level_1()","test_080_mask_end_mit_level_1()","test_090_mask_multilevel()","test_0_und_1()","test_100_mask_with_brackets()","test_array_diff()","test_array_shift_complement()","test_avg()","test_basics()","test_blank()","test_camelcase()","test_capitalize()","test_capitalized?()","test_compact()","test_contentclass_mono()","test_contentclass_multi()","test_contentclass_set_and_hash()","test_create()","test_cut()","test_delete()","test_diff()","test_distribution_class()","test_distribution_size()","test_downcase_upcase()","test_each()","test_each()","test_equal()","test_equal_2()","test_fehlerhalte_matrix()","test_fixsize()","test_german_sz()","test_hash()","test_index()","test_insert()","test_integer_triviales()","test_invert()","test_is_collection()","test_is_collection()","test_is_collection()","test_is_numeric()","test_leer()","test_list_with_mit_block()","test_list_with_ohne_block()","test_matrix_zellen_und_zeilen()","test_mean_harmonic()","test_merge()","test_mgsub()","test_nchar()","test_nil_patches()","test_op_store()","test_order_by()","test_ordered_set()","test_overlap()","test_overlapdiff()","test_palindrom_rumpf()","test_parallel()","test_push()","test_range()","test_raumschiff_operator()","test_rectangle1()","test_rectangle2()","test_reduce53_a()","test_reduce53_b()","test_reduce53_c()","test_reduce53_d()","test_reduce53_e()","test_reduce94_a()","test_reduce94_b()","test_reduce94_c()","test_reduce94_e()","test_reduce94_f()","test_reduce94_full()","test_rephrase_index()","test_resize_to_header()","test_set()","test_slice()","test_sorted_set()","test_spalten()","test_split_by_index()","test_split_numeric()","test_to_class()","test_to_classname()","test_to_dictionary()","test_to_identifier()","test_to_integer()","test_to_integer_optional()","test_to_nil()","test_update()","test_utf8_size()","test_without_versioninfo()","to_a()","to_array_of_enumerables()","to_array_of_numerics()","to_array_of_strings()","to_class()","to_class()","to_class()","to_class()","to_classname()","to_classname()","to_classname()","to_classname()","to_dictionary()","to_dictionary()","to_dictionary()","to_i()","to_i()","to_i()","to_identifier()","to_identifier()","to_integer()","to_integer()","to_integer()","to_integer_optional()","to_integer_optional()","to_integer_optional()","to_nil()","to_nil()","to_nil()","to_nil()","to_nil_unless()","to_nil_unless()","to_ordered_set()","to_ordered_set()","to_s()","to_set()","to_set()","to_sorted_set()","to_sorted_set()","to_sorted_set()","to_sym()","to_time()","to_time()","to_x()","to_x()","transpose()","transpose!()","transpose!()","umbrella()","underscore()","underscore()","uniq()","uniq!()","unshift()","upcase2()","upcase2()","upcase2!()","upcase2!()","upcase?()","within?()","without_versioninfo()","without_versioninfo()","div","history","license","readme"],"longSearchIndex":["array","array2","arrayofenumerables","arrayofnumerics","arrayofstrings","calltracker","callerutils","class","dictionary","enumerable","enumerableenumerables","enumerablenumerics","enumerablestrings","falseclass","float","hash","integer","kkernel","kyanite","matrix2","nilclass","numeric","object","optimizer","orderedset","range","set","sortedset","string","symbol","testkyanitearray","testkyaniteclassutils","testkyanitedictionary","testkyaniteenumerableenumerables","testkyaniteenumerablenumerics","testkyaniteenumerablestrings","testkyaniteenumerablestructure","testkyanitehash","testkyanitematrix2","testkyanitenil","testkyanitenumeric","testkyaniteobject","testkyaniteoptimizer","testkyaniterange","testkyaniteset","testkyanitestringcast","testkyanitestringchars","testkyanitestringdiff","testkyanitestringlist","testkyanitestringmgsub","testkyanitestringnested","testkyanitestringsplit","testkyanitetree","testkyanitetruefalse","tree","tree::treenode","trueclass","undoable","nilclass#+()","symbol#+()","dictionary#-()","nilclass#-()","nilclass#<()","nilclass#<<()","class#<=>()","falseclass#<=>()","nilclass#<=>()","set#<=>()","symbol#<=>()","trueclass#<=>()","orderedset#==()","class#=~()","nilclass#=~()","nilclass#>()","nilclass#[]()","orderedset#[]()","sortedset#[]()","nilclass#[]=()","nilclass#abs()","nilclass#anti()","string#anti()","float#approx()","hash#arrayize()","nilclass#arrayize()","enumerablenumerics#average()","nilclass#average()","enumerablenumerics#avg()","nilclass#avg()","falseclass#blank?()","nilclass#blank?()","object#blank?()","trueclass#blank?()","nilclass#camelize()","string#camelize()","string#capitalize()","nilclass#capitalized?()","string#capitalized?()","nilclass#chop()","array2#clean4view()","matrix2#clean4view()","array2#clean4view!()","matrix2#clean4view!()","optimizer#cleanup()","nilclass#clear()","undoable::clear()","nilclass#code()","nilclass#collect()","matrix2#column()","matrix2#column_size()","nilclass#combine()","nilclass#compact()","hash#compact_keys!()","nilclass#compact_keys!()","hash#compact_values!()","nilclass#compact_values!()","nilclass#constantize()","string#constantize()","optimizer#content_max()","optimizer#content_min()","enumerable#contentclass()","nilclass#count()","nilclass#count_words()","string#count_words()","nilclass#cut()","string#cut()","object#deep_copy()","hash#delete_key()","nilclass#delete_key()","optimizer#delete_max()","optimizer#delete_min()","hash#delete_value()","nilclass#delete_value()","nilclass#demodulize()","string#demodulize()","nilclass#diff()","string#diff()","enumerable#distribution()","hash#distribution()","nilclass#downcase()","nilclass#downcase2()","string#downcase2()","nilclass#downcase2!()","string#downcase2!()","string#downcase?()","falseclass#dup()","integer#dup()","nilclass#dup()","symbol#dup()","trueclass#dup()","nilclass#each()","orderedset#each()","dictionary#each_with_index()","nilclass#empty?()","numeric#empty?()","object#empty?()","symbol#empty?()","nilclass#enum_to_array()","string#enum_to_array()","hash#eql?()","nilclass#extract()","string#extract()","dictionary#fetch_by_index()","nilclass#fetch_by_index()","tree::treenode#find()","hash#first()","orderedset#first()","set#first()","sortedset#first()","dictionary#first_key()","string#fixsize()","nilclass#from_x()","string#from_x()","hash#fuzzyget()","nilclass#fuzzyget()","nilclass#grep()","nilclass#gsub()","nilclass#gsub!()","hash#hash()","nilclass#include?()","string#include?()","orderedset#index()","nilclass#index_bracket()","string#index_bracket()","array2#inspect()","nilclass#invert_index()","range#invert_index()","enumerable#is_collection?()","object#is_collection?()","range#is_collection?()","string#is_collection?()","nilclass#is_numeric?()","object#is_numeric?()","nilclass#join()","nilclass#keys()","hash#last()","orderedset#last()","set#last()","sortedset#last()","dictionary#last_key()","nilclass#length()","nilclass#list_with()","string#list_with()","undoable#load_and_delete()","undoable#load_and_keep()","nilclass#mask()","string#mask()","enumerablenumerics#mean()","nilclass#mean()","enumerablenumerics#mean_arithmetric()","nilclass#mean_arithmetric()","enumerablenumerics#mean_geometric()","nilclass#mean_geometric()","enumerablenumerics#mean_harmonic()","nilclass#mean_harmonic()","nilclass#mgsub()","string#mgsub()","callerutils::mycaller()","callerutils::mycaller_maindir()","nilclass#mysqlize()","nilclass#name_of_constant()","object#name_of_constant()","nilclass#nchar()","string#nchar()","nilclass#nestinglevel()","string#nestinglevel()","calltracker::new()","orderedset::new()","string#old_include?()","orderedset#order_by()","nilclass#overlap()","string#overlap()","nilclass#overlapdiff()","string#overlapdiff()","enumerablestrings#palindrom_rumpf()","enumerablenumerics#parallel()","nilclass#parallel()","testkyanitetree#pest_allkeys()","testkyanitetree#pest_see_tree()","nilclass#pop()","testkyaniteoptimizer#pppest_cleanup()","enumerablenumerics#prd()","nilclass#prd()","tree::treenode#print_tree()","nilclass#push()","optimizer#push()","set#push()","string::random()","enumerableenumerables#rectangle()","nilclass#rectangle()","nilclass#reduce53()","string#reduce53()","nilclass#reduce53!()","string#reduce53!()","nilclass#reduce94()","string#reduce94()","nilclass#reduce94!()","string#reduce94!()","calltracker#register()","object#remove_task()","kkernel#repeat_n_seconds()","array#rephrase_index()","calltracker#report()","object#respond()","array2#row()","array2#row_size()","nilclass#row_to_nil()","undoable#save()","optimizer#score_max()","optimizer#score_min()","matrix2#set_column!()","array2#set_element!()","array2#set_row!()","testkyanitetree#setup()","array#shift_complement()","nilclass#shift_complement()","numeric#shift_complement()","nilclass#show_regexp()","string#show_regexp()","array#shuffle()","nilclass#shuffle()","string#shuffle()","array#shuffle!()","nilclass#shuffle!()","string#shuffle!()","kkernel#silence_warnings()","nilclass#size()","symbol#size()","kkernel#smart_load_path()","nilclass#split()","nilclass#split_by_index()","string#split_by_index()","nilclass#split_numeric()","numeric#split_numeric()","string#split_numeric()","nilclass#sql_regexp_for_kommaliste()","string#sql_regexp_for_kommaliste()","calltracker#start()","calltracker#stop()","falseclass#strip()","nilclass#strip()","trueclass#strip()","nilclass#strip!()","nilclass#sub()","nilclass#substract()","numeric#substract()","nilclass#sum()","enumerablenumerics#summation()","nilclass#summation()","calltracker#tally_calls()","testkyanitestringnested#test_010_anti()","testkyaniteenumerablenumerics#test_01_prd()","testkyaniteenumerablenumerics#test_01_sum()","testkyanitestringnested#test_020_index_bracket()","testkyanitestringnested#test_030_mask_ungeklammert()","testkyanitestringnested#test_040_mask_eine_klammer()","testkyanitestringnested#test_050_mask_zwei_klammern()","testkyanitestringnested#test_060_mask_leer()","testkyanitestringnested#test_070_mask_start_mit_level_1()","testkyanitestringnested#test_080_mask_end_mit_level_1()","testkyanitestringnested#test_090_mask_multilevel()","testkyanitetruefalse#test_0_und_1()","testkyanitestringnested#test_100_mask_with_brackets()","testkyanitearray#test_array_diff()","testkyanitearray#test_array_shift_complement()","testkyaniteenumerablenumerics#test_avg()","testkyaniteoptimizer#test_basics()","testkyaniteobject#test_blank()","testkyanitestringchars#test_camelcase()","testkyanitestringchars#test_capitalize()","testkyanitestringchars#test_capitalized?()","testkyanitehash#test_compact()","testkyaniteenumerablestructure#test_contentclass_mono()","testkyaniteenumerablestructure#test_contentclass_multi()","testkyaniteenumerablestructure#test_contentclass_set_and_hash()","testkyanitedictionary#test_create()","testkyanitestringsplit#test_cut()","testkyanitehash#test_delete()","testkyanitestringdiff#test_diff()","testkyaniteenumerablestructure#test_distribution_class()","testkyaniteenumerablestructure#test_distribution_size()","testkyanitestringchars#test_downcase_upcase()","testkyanitedictionary#test_each()","testkyaniteset#test_each()","testkyaniteset#test_equal()","testkyaniteset#test_equal_2()","testkyanitematrix2#test_fehlerhalte_matrix()","testkyanitestringsplit#test_fixsize()","testkyanitestringchars#test_german_sz()","testkyaniteset#test_hash()","testkyaniteset#test_index()","testkyanitedictionary#test_insert()","testkyanitenumeric#test_integer_triviales()","testkyaniterange#test_invert()","testkyanitedictionary#test_is_collection()","testkyaniteenumerablestructure#test_is_collection()","testkyaniteset#test_is_collection()","testkyaniteobject#test_is_numeric()","testkyaniteoptimizer#test_leer()","testkyanitestringlist#test_list_with_mit_block()","testkyanitestringlist#test_list_with_ohne_block()","testkyanitematrix2#test_matrix_zellen_und_zeilen()","testkyaniteenumerablenumerics#test_mean_harmonic()","testkyanitedictionary#test_merge()","testkyanitestringmgsub#test_mgsub()","testkyanitestringsplit#test_nchar()","testkyanitenil#test_nil_patches()","testkyanitedictionary#test_op_store()","testkyanitedictionary#test_order_by()","testkyaniteset#test_ordered_set()","testkyanitestringdiff#test_overlap()","testkyanitestringdiff#test_overlapdiff()","testkyaniteenumerablestrings#test_palindrom_rumpf()","testkyaniteenumerablenumerics#test_parallel()","testkyanitedictionary#test_push()","testkyaniteoptimizer#test_range()","testkyanitetruefalse#test_raumschiff_operator()","testkyaniteenumerableenumerables#test_rectangle1()","testkyaniteenumerableenumerables#test_rectangle2()","testkyanitestringchars#test_reduce53_a()","testkyanitestringchars#test_reduce53_b()","testkyanitestringchars#test_reduce53_c()","testkyanitestringchars#test_reduce53_d()","testkyanitestringchars#test_reduce53_e()","testkyanitestringchars#test_reduce94_a()","testkyanitestringchars#test_reduce94_b()","testkyanitestringchars#test_reduce94_c()","testkyanitestringchars#test_reduce94_e()","testkyanitestringchars#test_reduce94_f()","testkyanitestringchars#test_reduce94_full()","testkyanitearray#test_rephrase_index()","testkyanitematrix2#test_resize_to_header()","testkyaniteset#test_set()","testkyanitehash#test_slice()","testkyaniteset#test_sorted_set()","testkyanitematrix2#test_spalten()","testkyanitestringsplit#test_split_by_index()","testkyanitestringsplit#test_split_numeric()","testkyaniteclassutils#test_to_class()","testkyaniteclassutils#test_to_classname()","testkyanitedictionary#test_to_dictionary()","testkyanitestringcast#test_to_identifier()","testkyanitestringcast#test_to_integer()","testkyanitestringcast#test_to_integer_optional()","testkyanitestringcast#test_to_nil()","testkyanitedictionary#test_update()","testkyanitestringchars#test_utf8_size()","testkyanitestringsplit#test_without_versioninfo()","orderedset#to_a()","array#to_array_of_enumerables()","array#to_array_of_numerics()","array#to_array_of_strings()","class#to_class()","nilclass#to_class()","string#to_class()","symbol#to_class()","class#to_classname()","nilclass#to_classname()","string#to_classname()","symbol#to_classname()","array#to_dictionary()","hash#to_dictionary()","nilclass#to_dictionary()","falseclass#to_i()","nilclass#to_i()","trueclass#to_i()","nilclass#to_identifier()","string#to_identifier()","integer#to_integer()","nilclass#to_integer()","string#to_integer()","integer#to_integer_optional()","nilclass#to_integer_optional()","string#to_integer_optional()","nilclass#to_nil()","numeric#to_nil()","object#to_nil()","string#to_nil()","nilclass#to_nil_unless()","object#to_nil_unless()","array#to_ordered_set()","nilclass#to_ordered_set()","tree::treenode#to_s()","nilclass#to_set()","object#to_set()","array#to_sorted_set()","nilclass#to_sorted_set()","sortedset#to_sorted_set()","nilclass#to_sym()","integer#to_time()","nilclass#to_time()","nilclass#to_x()","string#to_x()","nilclass#transpose()","enumerable#transpose!()","nilclass#transpose!()","nilclass#umbrella()","nilclass#underscore()","string#underscore()","nilclass#uniq()","nilclass#uniq!()","dictionary#unshift()","nilclass#upcase2()","string#upcase2()","nilclass#upcase2!()","string#upcase2!()","string#upcase?()","nilclass#within?()","nilclass#without_versioninfo()","string#without_versioninfo()","","","",""],"info":[["Array","","Array.html","","<p> | Kyanite | Object | Array | Set | Enumerable | Hash |  &mdash; | <strong>Array</strong> |  ArrayOfNumerics  | ArrayOfStrings …\n\n"],["Array2","","Array2.html","","<p>Ein Array2 ist eine spezielle Form von Array, nämlich immer\nzweidimensional. Siehe auch Matrix2!\n<p>Ein …\n"],["ArrayOfEnumerables","","ArrayOfEnumerables.html","","<p> | Kyanite | Object | Array | Set | Enumerable | Hash |  &mdash; | Array |  ArrayOfNumerics  | ArrayOfStrings …\n\n"],["ArrayOfNumerics","","ArrayOfNumerics.html","","<p> | Kyanite | Object | Array | Set | Enumerable | Hash |  &mdash; | Array |  <strong>ArrayOfNumerics</strong>  | ArrayOfStrings …\n\n"],["ArrayOfStrings","","ArrayOfStrings.html","","<p> | Kyanite | Object | Array | Set | Enumerable | Hash |  &mdash; | Array |  ArrayOfNumerics  | <strong>ArrayOfStrings</strong> …\n\n"],["CallTracker","","CallTracker.html","","<p>oreilly.com/catalog/9780596523695/ Ruby Cookbook, by Lucas Carlson and\nLeonard Richardson Copyright 2006 …\n"],["CallerUtils","","CallerUtils.html","","<p> | Kyanite | Object | Array | Set | Enumerable | Hash |  &mdash; | <strong>Object</strong> | String | Symbol | Numeric |\n<p>  &mdash; | Object …\n\n"],["Class","","Class.html","","<p> | Kyanite | Object | Array | Set | Enumerable | Hash |  &mdash; | <strong>Object</strong> | String | Symbol | Numeric |\n<p>  &mdash; |  …\n\n"],["Dictionary","","Dictionary.html","","<p> | Kyanite | Object | Array | Set | Enumerable | Hash |  &mdash; | Hash |  <strong>Dictionary</strong> |\n\n<p>Tools For Facets Dictionary …\n"],["Enumerable","","Enumerable.html","","<p> | Kyanite | Object | Array | Set | Enumerable | Hash |  &mdash; | <strong>Enumerable</strong> | EnumerableNumerics | EnumerableStrings …\n\n"],["EnumerableEnumerables","","EnumerableEnumerables.html","","<p> | Kyanite | Object | Array | Set | Enumerable | Hash |  &mdash; | Enumerable | EnumerableNumerics | EnumerableStrings …\n\n"],["EnumerableNumerics","","EnumerableNumerics.html","","<p> | Kyanite | Object | Array | Set | Enumerable | Hash |  &mdash; | Enumerable | <strong>EnumerableNumerics</strong> | EnumerableStrings …\n\n"],["EnumerableStrings","","EnumerableStrings.html","","<p> | Kyanite | Object | Array | Set | Enumerable | Hash |  &mdash; | Enumerable | EnumerableNumerics | <strong>EnumerableStrings</strong> …\n\n"],["FalseClass","","FalseClass.html","","<p> | Kyanite | Object | Array | Set | Enumerable | Hash |  &mdash; | Kyanite | TrueClass | <strong>FalseClass</strong> | NilClass …\n\n"],["Float","","Float.html","","<p> | Kyanite | Object | Array | Set | Enumerable | Hash |  &mdash; | Object | String | Symbol | <strong>Numeric</strong> |\n<p>  &mdash; | Numeric …\n\n"],["Hash","","Hash.html","","<p> | Kyanite | Object | Array | Set | Enumerable | Hash |  &mdash; | <strong>Hash</strong> |  Dictionary |\n\n<p>Tools For Hash\n<p>See TestKyaniteHash …\n"],["Integer","","Integer.html","","<p> | Kyanite | Object | Array | Set | Enumerable | Hash |  &mdash; | Object | String | Symbol | <strong>Numeric</strong> |\n<p>  &mdash; |  …\n\n"],["KKernel","","KKernel.html","","<p> | Kyanite | Object | Array | Set | Enumerable | Hash |  &mdash; | <strong>Object</strong> | String | Symbol | Numeric |\n<p>  &mdash; | Object …\n\n"],["Kyanite","","Kyanite.html","",""],["Matrix2","","Matrix2.html","","<p>Datenstruktur für streng-zweidimensionale Matritzen. Erbt die Methoden von\nArray2 und Array. Beispiele …\n"],["NilClass","","NilClass.html","","<p> | Kyanite | Object | Array | Set | Enumerable | Hash |  &mdash; | Kyanite | TrueClass | FalseClass | <strong>NilClass</strong> …\n\n"],["Numeric","","Numeric.html","","<p> | Kyanite | Object | Array | Set | Enumerable | Hash |  &mdash; | Object | String | Symbol | <strong>Numeric</strong> |\n<p>  &mdash; | <strong>Numeric</strong> …\n\n"],["Object","","Object.html","","<p> | Kyanite | Object | Array | Set | Enumerable | Hash |  &mdash; | <strong>Object</strong> | String | Symbol | Numeric |\n<p>  &mdash; | <strong>Object</strong> …\n\n"],["Optimizer","","Optimizer.html","","<p> | Kyanite | Object | Array | Set | Enumerable | Hash |  &mdash; | Kyanite | TrueClass | FalseClass | NilClass …\n"],["OrderedSet","","OrderedSet.html","","<p> | Kyanite | Object | Array | Set | Enumerable | Hash |  &mdash; | Set | <strong>OrderedSet</strong> | SortedSet |\n\n<p>Ordered Set …\n"],["Range","","Range.html","","<p> | Kyanite | Object | Array | Set | Enumerable | Hash |  &mdash; | Array |  ArrayOfNumerics  | ArrayOfStrings …\n\n"],["Set","","Set.html","","<p> | Kyanite | Object | Array | Set | Enumerable | Hash |  &mdash; | <strong>Set</strong> | OrderedSet | SortedSet |\n\n<p>General Set …\n"],["SortedSet","","SortedSet.html","","<p> | Kyanite | Object | | Array | Set | Enumerable | Hash  &mdash; | Set | OrderedSet | <strong>SortedSet</strong> |\n\n<p>Sorted Set …\n"],["String","","String.html","","<p> | Kyanite | Object | Array | Set | Enumerable | Hash |  &mdash; | Object | <strong>String</strong> | Symbol | Numeric |\n\n<p>String …\n"],["Symbol","","Symbol.html","","<p> | Kyanite | Object | Array | Set | Enumerable | Hash |  &mdash; | Object | String | <strong>Symbol</strong> | Numeric |\n\n<p>Symbol …\n"],["TestKyaniteArray","","TestKyaniteArray.html","","<p>Tests für Array\n"],["TestKyaniteClassutils","","TestKyaniteClassutils.html","","<p>Tests for String, Symbol, Class\n"],["TestKyaniteDictionary","","TestKyaniteDictionary.html","","<p>Tests for Dictionary\n"],["TestKyaniteEnumerableEnumerables","","TestKyaniteEnumerableEnumerables.html","","<p>Tests für EnumerableEnumerables\n"],["TestKyaniteEnumerableNumerics","","TestKyaniteEnumerableNumerics.html","","<p>Tests für EnumerableNumerics\n"],["TestKyaniteEnumerableStrings","","TestKyaniteEnumerableStrings.html","","<p>Tests für EnumerableStrings\n"],["TestKyaniteEnumerableStructure","","TestKyaniteEnumerableStructure.html","","<p>Tests für Enumerable\n"],["TestKyaniteHash","","TestKyaniteHash.html","","<p>Tests for Hash\n"],["TestKyaniteMatrix2","","TestKyaniteMatrix2.html","","<p>Tests for Matrix2\n"],["TestKyaniteNil","","TestKyaniteNil.html","","<p>Tests for NilClass\n"],["TestKyaniteNumeric","","TestKyaniteNumeric.html","","<p>Tests for Numeric\n"],["TestKyaniteObject","","TestKyaniteObject.html","","<p>Tests for Object\n"],["TestKyaniteOptimizer","","TestKyaniteOptimizer.html","","<p>Tests for Optimizer\n"],["TestKyaniteRange","","TestKyaniteRange.html","","<p>Tests for Range\n"],["TestKyaniteSet","","TestKyaniteSet.html","","<p>Tests für Set, OrderedSet, SortedSet\n"],["TestKyaniteStringCast","","TestKyaniteStringCast.html","","<p>Tests for String\n"],["TestKyaniteStringChars","","TestKyaniteStringChars.html","","<p>Tests for String\n"],["TestKyaniteStringDiff","","TestKyaniteStringDiff.html","","<p>Tests for String\n"],["TestKyaniteStringList","","TestKyaniteStringList.html","","<p>Tests for String\n"],["TestKyaniteStringMgsub","","TestKyaniteStringMgsub.html","","<p>Tests for String\n"],["TestKyaniteStringNested","","TestKyaniteStringNested.html","","<p>Tests for String\n"],["TestKyaniteStringSplit","","TestKyaniteStringSplit.html","","<p>Tests for String\n"],["TestKyaniteTree","","TestKyaniteTree.html","","<p>Tests for Tree::TreeNode\n"],["TestKyaniteTrueFalse","","TestKyaniteTrueFalse.html","","<p>Tests for TrueClass, FalseClass\n"],["Tree","","Tree.html","",""],["Tree::TreeNode","","Tree/TreeNode.html","","<p> | Kyanite | Object | Array | Set | Enumerable | Hash |  &mdash; | Kyanite | TrueClass | FalseClass | NilClass …\n"],["TrueClass","","TrueClass.html","","<p> | Kyanite | Object | Array | Set | Enumerable | Hash |  &mdash; | Kyanite | <strong>TrueClass</strong> | FalseClass | NilClass …\n\n"],["Undoable","","Undoable.html","","<p> | Kyanite | Object | Array | Set | Enumerable | Hash |  &mdash; | <strong>Object</strong> | String | Symbol | Numeric | Class …\n"],["+","NilClass","NilClass.html#method-i-2B","(other)",""],["+","Symbol","Symbol.html#method-i-2B","(other)","<p>wie gleichlautende String-Funktion\n"],["-","Dictionary","Dictionary.html#method-i-2D","(other)",""],["-","NilClass","NilClass.html#method-i-2D","(other)",""],["<","NilClass","NilClass.html#method-i-3C","(*a)",""],["<<","NilClass","NilClass.html#method-i-3C-3C","(element)","<p>Rückgabe: Array mit dem einen Element\n"],["<=>","Class","Class.html#method-i-3C-3D-3E","(other)","<p>Vergleichsoperator: Alphabetisch.\n"],["<=>","FalseClass","FalseClass.html#method-i-3C-3D-3E","(other)","<p>see TestKyaniteTrueFalse#test_raumschiff_operator for tests\n"],["<=>","NilClass","NilClass.html#method-i-3C-3D-3E","(*a)",""],["<=>","Set","Set.html#method-i-3C-3D-3E","(other)","<p>Vergleichsoperator, Standardsortierung: Size\n"],["<=>","Symbol","Symbol.html#method-i-3C-3D-3E","(other)","<p>wie gleichlautende String-Funktion\n"],["<=>","TrueClass","TrueClass.html#method-i-3C-3D-3E","(other)","<p>see TestKyaniteTrueFalse#test_raumschiff_operator for tests\n"],["==","OrderedSet","OrderedSet.html#method-i-3D-3D","(other)",""],["=~","Class","Class.html#method-i-3D-7E","(other)","<p>Unscharfer Vergleich zweier Klassen, z.B. für Tests\n"],["=~","NilClass","NilClass.html#method-i-3D-7E","(other)","<p>Rückgabe: false\n"],[">","NilClass","NilClass.html#method-i-3E","(*a)",""],["[]","NilClass","NilClass.html#method-i-5B-5D","(*a)",""],["[]","OrderedSet","OrderedSet.html#method-i-5B-5D","(index)","<p>Liefert das n-te Element.\n"],["[]","SortedSet","SortedSet.html#method-i-5B-5D","(index)","<p>Liefert das n-te Element. ineffizient!!\n"],["[]=","NilClass","NilClass.html#method-i-5B-5D-3D","(*a)",""],["abs","NilClass","NilClass.html#method-i-abs","()",""],["anti","NilClass","NilClass.html#method-i-anti","()",""],["anti","String","String.html#method-i-anti","()","<p>Gibt die passende gegenteilige Klammer zurück ‘(’.anti          -&gt;  ‘)’\n‘{’.anti          -&gt;  ‘}’ …\n"],["approx","Float","Float.html#method-i-approx","(other, relative_epsilon=Float::EPSILON, epsilon=Float::EPSILON)","\n<pre class=\"ruby\"><span class=\"ruby-value\">1.9</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-value\">1.8</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">0.1</span>               =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-keyword\">false</span>\n<span class=\"ruby-value\">1.9</span>.<span class=\"ruby-identifier\">approx</span>(<span class=\"ruby-value\">1.8</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">0.1</span>)          =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-keyword\">true</span>\n<span class=\"ruby-value\">98.6</span>.<span class=\"ruby-identifier\">approx</span>(<span class=\"ruby-value\">98.66</span>)    <span class=\"ruby-operator\">...</span>\n</pre>\n"],["arrayize","Hash","Hash.html#method-i-arrayize","(*keys)","<p>erzwingt ein Array der Länge 1, wenn sowohl Einzelwerte als auch Arrays\nerlaubt sind.  Beispiel:\n\n<pre>inputoptions ...</pre>\n"],["arrayize","NilClass","NilClass.html#method-i-arrayize","(*a)",""],["average","EnumerableNumerics","EnumerableNumerics.html#method-i-average","()",""],["average","NilClass","NilClass.html#method-i-average","()",""],["avg","EnumerableNumerics","EnumerableNumerics.html#method-i-avg","()",""],["avg","NilClass","NilClass.html#method-i-avg","()",""],["blank?","FalseClass","FalseClass.html#method-i-blank-3F","()","<p>umdefiniert!\n<p>TestKyaniteObject#test_blank\n"],["blank?","NilClass","NilClass.html#method-i-blank-3F","()","<p>Rückgabe: false\n"],["blank?","Object","Object.html#method-i-blank-3F","()","<p><code> false </code>\n<p>Tests and examples see TestKyaniteObject\n"],["blank?","TrueClass","TrueClass.html#method-i-blank-3F","()","<p>Rückgabe: false\n"],["camelize","NilClass","NilClass.html#method-i-camelize","()",""],["camelize","String","String.html#method-i-camelize","(first_letter_in_uppercase = true)","<p>By default, <code>camelize</code> converts strings to UpperCamelCase. If\nthe argument to <code>camelize</code> is set to <code>:lower</code> …\n"],["capitalize","String","String.html#method-i-capitalize","()",""],["capitalized?","NilClass","NilClass.html#method-i-capitalized-3F","()","<p>Rückgabe: false\n"],["capitalized?","String","String.html#method-i-capitalized-3F","()","<p>Erster Buchstabe groß?\n"],["chop","NilClass","NilClass.html#method-i-chop","()",""],["clean4view","Array2","Array2.html#method-i-clean4view","(level = 0)","<p>Liefert eine bereinigte Kopie des Array2.\n<p>Level=0 &mdash; Platzhalter für den More-Link durch echten More-Link …\n"],["clean4view","Matrix2","Matrix2.html#method-i-clean4view","(level = 0)","<p>Liefert eine bereinigte Kopie der Matrix2.\n<p>Level=0 &mdash; Resize to Header, d.h. alle Zeilen werden auf die Länge …\n"],["clean4view!","Array2","Array2.html#method-i-clean4view-21","(level = 0)","<p>In-place-Variante von clean4view.\n"],["clean4view!","Matrix2","Matrix2.html#method-i-clean4view-21","(level = 0)","<p>In-place-Variante von clean4view.\n"],["cleanup","Optimizer","Optimizer.html#method-i-cleanup","()","<p>Löscht alle Objekte in der Mitte.\n"],["clear","NilClass","NilClass.html#method-i-clear","()",""],["clear","Undoable","Undoable.html#method-c-clear","()","<p>Verwirft alle gepeicherten Objektzustände.\n"],["code","NilClass","NilClass.html#method-i-code","()",""],["collect","NilClass","NilClass.html#method-i-collect","(&block)",""],["column","Matrix2","Matrix2.html#method-i-column","(j)","<p>Liefert eine bestimmte Spalte zurück. Dabei wird die Matrix2 vorher mit\nclean4view!(0) behandelt, d.h. …\n"],["column_size","Matrix2","Matrix2.html#method-i-column_size","()","<p>Wieviele Spalten hat die Tabelle? Maßgeblich dafür ist die Header-Spalte!\n"],["combine","NilClass","NilClass.html#method-i-combine","(*a)",""],["compact","NilClass","NilClass.html#method-i-compact","()",""],["compact_keys!","Hash","Hash.html#method-i-compact_keys-21","()","<p>Entfernt alle Key-Value-Paare mit <strong>nil-Keys</strong> in-place.\nTests: TestHash#test_delete\n"],["compact_keys!","NilClass","NilClass.html#method-i-compact_keys-21","()",""],["compact_values!","Hash","Hash.html#method-i-compact_values-21","()","<p>Entfernt alle alle Key-Value-Paare mit <strong>nil-Values</strong>\nin-place. Tests: TestHash#test_compact\n"],["compact_values!","NilClass","NilClass.html#method-i-compact_values-21","()",""],["constantize","NilClass","NilClass.html#method-i-constantize","()",""],["constantize","String","String.html#method-i-constantize","()","<p>Tries to find a constant with the name specified in the argument string:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;Module&quot;</span>.<span class=\"ruby-identifier\">constantize</span>     <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["content_max","Optimizer","Optimizer.html#method-i-content_max","(range=0..0)","<p>Liefert den Content mit dem höchsten Score. Mit\n<p> &mdash; content_max(0)      erhält man den ersten Content mit …\n"],["content_min","Optimizer","Optimizer.html#method-i-content_min","(range=0..0)","<p>siehe #content_max\n"],["contentclass","Enumerable","Enumerable.html#method-i-contentclass","( options={} )","<p>Was für Objekte beinhaltet die Collection? Liefert die Klasse der\nContentelemente, oder <code>Object</code> wenn es …\n"],["count","NilClass","NilClass.html#method-i-count","(*a)","<p>Rückgabe: 0\n"],["count_words","NilClass","NilClass.html#method-i-count_words","()","<p>Rückgabe: 0\n"],["count_words","String","String.html#method-i-count_words","()","<p>Wörter zählen\n"],["cut","NilClass","NilClass.html#method-i-cut","(*a)","<p>Rückgabe: Leerer String, siehe String#split\n"],["cut","String","String.html#method-i-cut","(len=5)","<p>Schneidet eine String auf eine Maximallänge. Bsp.:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">'Hallo'</span>.<span class=\"ruby-identifier\">cut</span>(<span class=\"ruby-value\">3</span>) =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">'Hal'</span>\n</pre>\n<p>Tests siehe TestKyaniteStringSplit#test_cut …\n"],["deep_copy","Object","Object.html#method-i-deep_copy","()","<p>Alternative zu Object#dup. Dupliziert auch Unterobjekte. Langsam. Wird z.B.\nfür Undo-Operationen verwendet, …\n"],["delete_key","Hash","Hash.html#method-i-delete_key","(key)","<p>Entfernt das Key-Value-Paar mit einem bestimmten Key in-place.  Rückgabe\nist der modifizierte Hash (im …\n"],["delete_key","NilClass","NilClass.html#method-i-delete_key","(*a)",""],["delete_max","Optimizer","Optimizer.html#method-i-delete_max","()","<p>Löscht das Objekt mit dem höchsten Score.\n"],["delete_min","Optimizer","Optimizer.html#method-i-delete_min","()","<p>Löscht das Objekt mit dem niedrigsten Score.\n"],["delete_value","Hash","Hash.html#method-i-delete_value","(value)","<p>Entfernt alle Key-Value-Paare mit einem bestimmten Value in-place.\n"],["delete_value","NilClass","NilClass.html#method-i-delete_value","(*a)",""],["demodulize","NilClass","NilClass.html#method-i-demodulize","()",""],["demodulize","String","String.html#method-i-demodulize","()","<p>Removes the module part from the expression in the string.\n<p>Examples:\n\n<pre>&quot;ActiveRecord::CoreExtensions::String::Inflections&quot;.demodulize ...</pre>\n"],["diff","NilClass","NilClass.html#method-i-diff","(b)","<p>Rückgabe: b, siehe String#diff\n"],["diff","String","String.html#method-i-diff","(b)","<p>Liefert den Unterschied zwischen zwei Strings zurück. Im Zweifelsfall immer\nden längsten String. Wenn …\n"],["distribution","Enumerable","Enumerable.html#method-i-distribution","( mode = :size)","<p>Liefert die Verteilung der size  oder die Verteilung der class  oder die\nVerteilung eines anderen Merkmals …\n"],["distribution","Hash","Hash.html#method-i-distribution","( mode = :size)","<p>Liefert die Verteilung der size  oder die Verteilung der class  oder die\nVerteilung eines anderen Merkmals …\n"],["downcase","NilClass","NilClass.html#method-i-downcase","()",""],["downcase2","NilClass","NilClass.html#method-i-downcase2","()",""],["downcase2","String","String.html#method-i-downcase2","()","<p>Ein Überschreiben von downcase führt in Kombination mit ActiveSupport zu\nseltsamen Ergebnissen!\n"],["downcase2!","NilClass","NilClass.html#method-i-downcase2-21","()",""],["downcase2!","String","String.html#method-i-downcase2-21","()",""],["downcase?","String","String.html#method-i-downcase-3F","()",""],["dup","FalseClass","FalseClass.html#method-i-dup","()","<p>Rückgabe: self\n"],["dup","Integer","Integer.html#method-i-dup","()","<p>Rückgabe: self\n<p>Test: TestKyaniteNumeric#test_integer_triviales\n"],["dup","NilClass","NilClass.html#method-i-dup","()",""],["dup","Symbol","Symbol.html#method-i-dup","()","<p>Rückgabe: self\n"],["dup","TrueClass","TrueClass.html#method-i-dup","()","<p>Rückgabe: self\n"],["each","NilClass","NilClass.html#method-i-each","(*a)",""],["each","OrderedSet","OrderedSet.html#method-i-each","()",""],["each_with_index","Dictionary","Dictionary.html#method-i-each_with_index","()",""],["empty?","NilClass","NilClass.html#method-i-empty-3F","()","<p>Rückgabe: true\n"],["empty?","Numeric","Numeric.html#method-i-empty-3F","()","<p>Zahlen sind nicht empty: Rückgabe false\n"],["empty?","Object","Object.html#method-i-empty-3F","()","<p><code> false </code>\n"],["empty?","Symbol","Symbol.html#method-i-empty-3F","()","<p>Rückgabe: false\n"],["enum_to_array","NilClass","NilClass.html#method-i-enum_to_array","()",""],["enum_to_array","String","String.html#method-i-enum_to_array","()","<p>macht aus einer MySQL-Enum-Angabe ein Array\n"],["eql?","Hash","Hash.html#method-i-eql-3F","(other)","<p>Credit: Paul Murur mucur.name/posts/when-is-a-set-not-a-set To determine\nwhether two hashes are the same, …\n"],["extract","NilClass","NilClass.html#method-i-extract","(*a)",""],["extract","String","String.html#method-i-extract","( start_regexp, stop_regexp )","<p>Extrahiert einen Teilstring anhand zweier regulärer Ausdrücke. Beispiel:\n\n<pre>string = '&lt;select id=&quot;hallo&quot;&gt;&lt;option ...</pre>\n"],["fetch_by_index","Dictionary","Dictionary.html#method-i-fetch_by_index","(index)",""],["fetch_by_index","NilClass","NilClass.html#method-i-fetch_by_index","(*a)",""],["find","Tree::TreeNode","Tree/TreeNode.html#method-i-find","( node_name )","<p>anders als [] wird der gesamte Baum durchsucht Liefert den ersten Treffer\n"],["first","Hash","Hash.html#method-i-first","()","<p>liefert irgendein Value\n"],["first","OrderedSet","OrderedSet.html#method-i-first","()",""],["first","Set","Set.html#method-i-first","()","<p>Liefert irgendein Element.\n"],["first","SortedSet","SortedSet.html#method-i-first","()",""],["first_key","Dictionary","Dictionary.html#method-i-first_key","()",""],["fixsize","String","String.html#method-i-fixsize","( len )","<p>Erzwingt eine bestimmte Länge\n<p>Tests siehe TestKyaniteStringSplit#test_fixsize\n"],["from_x","NilClass","NilClass.html#method-i-from_x","()",""],["from_x","String","String.html#method-i-from_x","()","<p>Get a char for a hex representation.\n<p>See also String#to_x.\n"],["fuzzyget","Hash","Hash.html#method-i-fuzzyget","(key, level = 3)","<p>Greift auf den Hash mit nicht-ganz-passenden Schlüsseln zu\n"],["fuzzyget","NilClass","NilClass.html#method-i-fuzzyget","(*a)",""],["grep","NilClass","NilClass.html#method-i-grep","(*a)",""],["gsub","NilClass","NilClass.html#method-i-gsub","(*a)",""],["gsub!","NilClass","NilClass.html#method-i-gsub-21","(*a)",""],["hash","Hash","Hash.html#method-i-hash","()","<p>Credit: Paul Murur mucur.name/posts/when-is-a-set-not-a-set Create a hash\nbased on the keys and values. …\n"],["include?","NilClass","NilClass.html#method-i-include-3F","(*a)","<p>Rückgabe: false\n<p>redundante Definition!\n"],["include?","String","String.html#method-i-include-3F","(input)","<p>Nimmt jetzt auch ein Array an.  Die Array-Elemente werden ODER-verknüpft,\nd.h.  include? ist true, wenn …\n"],["index","OrderedSet","OrderedSet.html#method-i-index","(object)","<p>Wie Array#index\n"],["index_bracket","NilClass","NilClass.html#method-i-index_bracket","()",""],["index_bracket","String","String.html#method-i-index_bracket","( pattern=nil, start=0, last_found = nil )","<p>Findet das nächste zueinander passende Klammerpaar ab Position start.\nLiefert die Positionen der Klammern …\n"],["inspect","Array2","Array2.html#method-i-inspect","()","<p>Gibt das Array2 menschenlesbar aus.  Beispielaufruf:\n\n<pre>pp germany.adms_and_orte.inspect</pre>\n"],["invert_index","NilClass","NilClass.html#method-i-invert_index","()",""],["invert_index","Range","Range.html#method-i-invert_index","()","<p>Invertiert den Range, mit dem ein Ausschnitt eines Strings oder eines\nArrays bestimmt wird. Liefert einen …\n"],["is_collection?","Enumerable","Enumerable.html#method-i-is_collection-3F","()","<p>Enthält ein Objekt mehrere Objekte? Rückgabe: true\n<p>String und Range gelten nicht als Collection. See  …\n"],["is_collection?","Object","Object.html#method-i-is_collection-3F","()","<p>Enthält ein Objekt mehrere Objekte? String und Range gelten nicht als\nCollection. See TestKyaniteEnumerableStructure …\n"],["is_collection?","Range","Range.html#method-i-is_collection-3F","()","<p>Enthält ein Objekt mehrere Objekte? Rückgabe: false\n<p>String und Range gelten nicht als Collection. See …\n"],["is_collection?","String","String.html#method-i-is_collection-3F","()","<p>Enthält ein Objekt mehrere Objekte? Rückgabe: false\n<p>String und Range gelten nicht als Collection. See …\n"],["is_numeric?","NilClass","NilClass.html#method-i-is_numeric-3F","()","<p>Rückgabe: false\n"],["is_numeric?","Object","Object.html#method-i-is_numeric-3F","()","<p>Ist ein Objekt numerisch?\n<p>Tests and examples see TestKyaniteObject\n"],["join","NilClass","NilClass.html#method-i-join","()",""],["keys","NilClass","NilClass.html#method-i-keys","()",""],["last","Hash","Hash.html#method-i-last","()","<p>liefert irgendein anderes Value\n"],["last","OrderedSet","OrderedSet.html#method-i-last","()",""],["last","Set","Set.html#method-i-last","()","<p>Liefert irgendein anderes Element.\n"],["last","SortedSet","SortedSet.html#method-i-last","()",""],["last_key","Dictionary","Dictionary.html#method-i-last_key","()",""],["length","NilClass","NilClass.html#method-i-length","()","<p>Rückgabe: 0\n"],["list_with","NilClass","NilClass.html#method-i-list_with","(*a)",""],["list_with","String","String.html#method-i-list_with","( elemente, options = {}, &block )","<p>Listet Text auf. Beispiele siehe TestKyaniteStringList\n"],["load_and_delete","Undoable","Undoable.html#method-i-load_and_delete","()","<p>Rückgriff auf den gespeicherten Zustand eines Objektes. Der gespeicherte\nZustand wird verworfen.\n"],["load_and_keep","Undoable","Undoable.html#method-i-load_and_keep","()","<p>Rückgriff auf den gespeicherten Zustand eines Objektes. Der gespeicherte\nZustand verbleibt im Speicher …\n"],["mask","NilClass","NilClass.html#method-i-mask","(*a)",""],["mask","String","String.html#method-i-mask","( options={}, &block )","<p>Wendet den Block auf eine hierarchisch definierte Auswahl des Strings an.\n<p>See TestKyaniteStringNested …\n"],["mean","EnumerableNumerics","EnumerableNumerics.html#method-i-mean","()","<p>Arithmetrischer Mittelwert Tests and examples see\nTestKyaniteEnumerableNumerics.\n"],["mean","NilClass","NilClass.html#method-i-mean","()",""],["mean_arithmetric","EnumerableNumerics","EnumerableNumerics.html#method-i-mean_arithmetric","()",""],["mean_arithmetric","NilClass","NilClass.html#method-i-mean_arithmetric","()",""],["mean_geometric","EnumerableNumerics","EnumerableNumerics.html#method-i-mean_geometric","()","<p>Geometrischer Mittelwert\n"],["mean_geometric","NilClass","NilClass.html#method-i-mean_geometric","()",""],["mean_harmonic","EnumerableNumerics","EnumerableNumerics.html#method-i-mean_harmonic","( options={} )","<p>Harmonischer Mittelwert\n<p>Normalerweise ist der harmonische Mittelwert nur für positive Zahlen\nsinnvoll …\n"],["mean_harmonic","NilClass","NilClass.html#method-i-mean_harmonic","(*a)",""],["mgsub","NilClass","NilClass.html#method-i-mgsub","(*a)",""],["mgsub","String","String.html#method-i-mgsub","(key_value_pairs=[].freeze)","<p>Mehrere Patterns mit einer RegExp replacen. Ruby Cookbook Seite 32\n\n<pre>&quot;between&quot;.mgsub([[/ee/, 'AA'], [/e/, ...</pre>\n"],["mycaller","CallerUtils","CallerUtils.html#method-c-mycaller","(options={})","<p>Untersucht den Call-Stack. Liefert die Größe des Stacks oder den letzten\nEintrag.\n<p>Options:\n\n<pre>:skip    Ignoriere ...</pre>\n"],["mycaller_maindir","CallerUtils","CallerUtils.html#method-c-mycaller_maindir","(mycaller)","<p>Ermittelt das Hauptverzeichnis eines Callers auf heuristischem Wege. Der\nName des Hauptverzeichnisses …\n"],["mysqlize","NilClass","NilClass.html#method-i-mysqlize","()",""],["name_of_constant","NilClass","NilClass.html#method-i-name_of_constant","(*a)",""],["name_of_constant","Object","Object.html#method-i-name_of_constant","(wert_der_konstanten)","<p>Findet den Namen einer Ruby-Konstanten anhand seines Wertes. Funktioniert\nso nicht. Seltsamersweise funktioniert …\n"],["nchar","NilClass","NilClass.html#method-i-nchar","(*a)",""],["nchar","String","String.html#method-i-nchar","(n, replacement=nil)","<p>Returns <em>n</em> characters of the string. If <em>n</em> is positive the\ncharacters are from the beginning of the string. …\n"],["nestinglevel","NilClass","NilClass.html#method-i-nestinglevel","()","<p>Rückgabe: 0\n"],["nestinglevel","String","String.html#method-i-nestinglevel","(pattern=/[{<(\\[]/)","<p>Liefert die Verschachtelungstiefe.\n<p>See TestKyaniteStringNested for tests and examples.\n"],["new","CallTracker","CallTracker.html#method-c-new","(show_stack_depth=1)","<p>Initialize and start the trace.\n"],["new","OrderedSet","OrderedSet.html#method-c-new","(enum = nil)",""],["old_include?","String","String.html#method-i-old_include-3F","(input)",""],["order_by","OrderedSet","OrderedSet.html#method-i-order_by","( &block )",""],["overlap","NilClass","NilClass.html#method-i-overlap","(*a)","<p>Rückgabe: Leerer String, siehe String#overlap\n"],["overlap","String","String.html#method-i-overlap","(b)","<p>Gibt den gemeinsamen Teil zweier Strings aus (von vorne gezählt).\n<p>Beispiele &amp; Tests siehe TestKyaniteStringDiff#test_overlap …\n"],["overlapdiff","NilClass","NilClass.html#method-i-overlapdiff","(b)","<p>Rückgabe: [”, b], siehe String#overlapdiff\n"],["overlapdiff","String","String.html#method-i-overlapdiff","(b)","<p>Liefert zugleich overlap und diff zurück. Symmetrie: Rechnet man overlap +\ndiff, so erhält man immer …\n"],["palindrom_rumpf","EnumerableStrings","EnumerableStrings.html#method-i-palindrom_rumpf","()","<p>Bsp.:\n\n<pre>['lut', 'lutm', 'lutmi', 'lutmil', 'lutmila', 'lutrika', 'lutrik', 'lutri', 'lutr', 'lut'].palindrom_rumpf ...</pre>\n"],["parallel","EnumerableNumerics","EnumerableNumerics.html#method-i-parallel","()","<p>Ergebnis entspricht der Parallelschaltung von Widerständen. Tests and\nexamples see TestKyaniteEnumerableNumerics …\n"],["parallel","NilClass","NilClass.html#method-i-parallel","(*a)",""],["pest_allkeys","TestKyaniteTree","TestKyaniteTree.html#method-i-pest_allkeys","()",""],["pest_see_tree","TestKyaniteTree","TestKyaniteTree.html#method-i-pest_see_tree","()",""],["pop","NilClass","NilClass.html#method-i-pop","(*a)",""],["pppest_cleanup","TestKyaniteOptimizer","TestKyaniteOptimizer.html#method-i-pppest_cleanup","()",""],["prd","EnumerableNumerics","EnumerableNumerics.html#method-i-prd","()","<p>Produkt Methode darf nicht product heißen, die gibt es nämlich schon. Tests\nand examples see TestKyaniteEnumerableNumerics …\n"],["prd","NilClass","NilClass.html#method-i-prd","()",""],["print_tree","Tree::TreeNode","Tree/TreeNode.html#method-i-print_tree","(level = 0, breite = 8)","<p>funktioniert jetzt\n"],["push","NilClass","NilClass.html#method-i-push","(*a)",""],["push","Optimizer","Optimizer.html#method-i-push","( score, content, options={} )","<p>Beladen des Optimizers mit Objekten.\n"],["push","Set","Set.html#method-i-push","(elt)","<p>Fügt das Element an das Set an.\n"],["random","String","String.html#method-c-random","( type=:de, size=16)",""],["rectangle","EnumerableEnumerables","EnumerableEnumerables.html#method-i-rectangle","()","<p>Macht das Enumerable rechteckig. Maßgeblich ist die erste Zeile.\n<p>Tests and examples see TestKyaniteEnumerableEnumerables …\n"],["rectangle","NilClass","NilClass.html#method-i-rectangle","()",""],["reduce53","NilClass","NilClass.html#method-i-reduce53","()",""],["reduce53","String","String.html#method-i-reduce53","( options={} )","<p>Reduziert den String auf ein Base53-Encoding,  bestehend aus\nGroßbuchstaben, Minuszeichen und zu Kleinbuchstaben …\n"],["reduce53!","NilClass","NilClass.html#method-i-reduce53-21","()",""],["reduce53!","String","String.html#method-i-reduce53-21","( options={} )","<p>See TestKyaniteStringChars for tests and examples.\n"],["reduce94","NilClass","NilClass.html#method-i-reduce94","()",""],["reduce94","String","String.html#method-i-reduce94","( options={} )","<p>Reduziert den String auf ein Base94-Encoding.\n<p>Wandelt àáâăäãāåạąæảấầắằÀÁÂĂÄÃĀÅẠĄÆẢẤẦẮẰ usw. in aaaaaaaaaaaaaaaa …\n"],["reduce94!","NilClass","NilClass.html#method-i-reduce94-21","()",""],["reduce94!","String","String.html#method-i-reduce94-21","( options={} )","<p>See TestKyaniteStringChars for tests and examples.\n"],["register","CallTracker","CallTracker.html#method-i-register","(klass, method_symbol)","<p>Register a class/method combination as being interesting. Subsequent calls\nto the method will be tallied …\n"],["remove_task","Object","Object.html#method-i-remove_task","(task_name)",""],["repeat_n_seconds","KKernel","KKernel.html#method-i-repeat_n_seconds","( n=1, &block )","<p>Wiederholt einen Block so lange, bis die Zeit abgelaufen ist. Liefert die\nAnzahl der Durchläufe, die …\n"],["rephrase_index","Array","Array.html#method-i-rephrase_index","(i, style=:inv)","<p>Formuliert den Index eines Arrays\n\n<pre>:pos     als positive Angabe\n:neg     als negative Angabe\n:inv     wenn ...</pre>\n"],["report","CallTracker","CallTracker.html#method-i-report","(out=$stderr)","<p>Prints a report of the lines of code that called interesting methods,\nsorted so that the the most active …\n"],["respond","Object","Object.html#method-i-respond","(sym, *args)","<p>Quelle: Facets\nfacets.rubyforge.org/quick/rdoc/core/classes/Kernel.html#M000379\n"],["row","Array2","Array2.html#method-i-row","(i)","<p>Liefert eine bestimmte Zeile zurück.\n<p>Tests: TestMatrix2#test_matrix_zellen_und_zeilen\n"],["row_size","Array2","Array2.html#method-i-row_size","()","<p>Wieviele Zeilen hat das Array2?\n<p>Tests: TestMatrix2#test_matrix_zellen_und_zeilen\n"],["row_to_nil","NilClass","NilClass.html#method-i-row_to_nil","()",""],["save","Undoable","Undoable.html#method-i-save","(method=:dup)","<p>Speichert ein Objekt. Verwendet standardmäßig Object#dup. Für komplexere\nObjekte muss allerdings Object#deep_copy …\n"],["score_max","Optimizer","Optimizer.html#method-i-score_max","()","<p>Liefert den Wert des höchsten Scores.\n"],["score_min","Optimizer","Optimizer.html#method-i-score_min","()","<p>Liefert den Wert des niedrigsten Scores.\n"],["set_column!","Matrix2","Matrix2.html#method-i-set_column-21","(j,wert)","<p>Setzt den Wert einer Spalte. Dabei wird die Matrix2 vorher mit\nclean4view!(0) behandelt, d.h. sie verändert …\n"],["set_element!","Array2","Array2.html#method-i-set_element-21","(i,j,wert)","<p>Schreibt den Wert einer Zelle. Siehe auch set_row! und set_column!\nStattdessen kann man auch schreiben: …\n"],["set_row!","Array2","Array2.html#method-i-set_row-21","(i,wert)","<p>Setzt den Wert einer Zeile.\n<p>Tests: TestMatrix2#test_matrix_zellen_und_zeilen\n"],["setup","TestKyaniteTree","TestKyaniteTree.html#method-i-setup","()",""],["shift_complement","Array","Array.html#method-i-shift_complement","()","<p>schneidet vorne ein Element ab und gibt den Rest zurück. Wenn der Rest nur\nnoch aus einem Element besteht, …\n"],["shift_complement","NilClass","NilClass.html#method-i-shift_complement","()",""],["shift_complement","Numeric","Numeric.html#method-i-shift_complement","()","<p>siehe Array#shift_complement: Rückgabe nil\n"],["show_regexp","NilClass","NilClass.html#method-i-show_regexp","(*a)",""],["show_regexp","String","String.html#method-i-show_regexp","(re)","<p>Zeigt das Ergebnis eines Matches mit einer Regular Expression. Erleichtert\ndas Entwickeln regulärer Ausdrücke. …\n"],["shuffle","Array","Array.html#method-i-shuffle","()","<p>Bringt das Array in eine zufällige Reihenfolge\n"],["shuffle","NilClass","NilClass.html#method-i-shuffle","()",""],["shuffle","String","String.html#method-i-shuffle","(separator=//)","<p>Zufällige Reihenfolge\n"],["shuffle!","Array","Array.html#method-i-shuffle-21","()","<p>In-place-Variante von shuffle\n"],["shuffle!","NilClass","NilClass.html#method-i-shuffle-21","()",""],["shuffle!","String","String.html#method-i-shuffle-21","(separator=//)","<p>In-place-Variante von shuffle\n"],["silence_warnings","KKernel","KKernel.html#method-i-silence_warnings","()","<p>Stellt für den nachfolgenden Block die Ruby-Warnungen ab. Nützlich, um z.B.\nKonstanten zu überschreiben. …\n"],["size","NilClass","NilClass.html#method-i-size","()","<p>Rückgabe: 0\n"],["size","Symbol","Symbol.html#method-i-size","()","<p>wie gleichlautende String-Funktion\n"],["smart_load_path","KKernel","KKernel.html#method-i-smart_load_path","(__file__ = nil)","<p>Vereinfacht die require-Statements in den Tests bei der Entwicklung von\nLibraries.\n<p>Beim lokalen Aufruf …\n"],["split","NilClass","NilClass.html#method-i-split","(*a)","<p>Rückgabe: leeres Array\n"],["split_by_index","NilClass","NilClass.html#method-i-split_by_index","(*a)",""],["split_by_index","String","String.html#method-i-split_by_index","(idx)","<p>Schneidet einen String in Stücke.  Wie lang die Stücke sind, sagt der\nParameter (Format: einzelner Integer …\n"],["split_numeric","NilClass","NilClass.html#method-i-split_numeric","()",""],["split_numeric","Numeric","Numeric.html#method-i-split_numeric","()","<p>Zahlen sind schon numerisch: Rückgabe self\n"],["split_numeric","String","String.html#method-i-split_numeric","()","<p>Trennt einen String in numerische und alphanumerische Teile auf.\nFunktioniert derzeit nur mit positiven …\n"],["sql_regexp_for_kommaliste","NilClass","NilClass.html#method-i-sql_regexp_for_kommaliste","()",""],["sql_regexp_for_kommaliste","String","String.html#method-i-sql_regexp_for_kommaliste","()","<p>Gibt eine SQL-RegExp zurück, mit der man in Postgres kommaseparierte Listen\nduchsuchen kann.\n<p>Anwendung: …\n"],["start","CallTracker","CallTracker.html#method-i-start","()","<p>Tells the Ruby interpreter to call tally_calls whenever it’s about to do\nanything interesting.\n"],["stop","CallTracker","CallTracker.html#method-i-stop","(out=$stderr)","<p>Stops the profiler, and prints a report of the interesting calls made while\nit was running.\n"],["strip","FalseClass","FalseClass.html#method-i-strip","()","<p>Rückgabe: self\n"],["strip","NilClass","NilClass.html#method-i-strip","(*a)",""],["strip","TrueClass","TrueClass.html#method-i-strip","()","<p>Rückgabe: self\n"],["strip!","NilClass","NilClass.html#method-i-strip-21","(*a)","<p>def split(*a);                      nil;            end\n"],["sub","NilClass","NilClass.html#method-i-sub","(*a)",""],["substract","NilClass","NilClass.html#method-i-substract","(other)",""],["substract","Numeric","Numeric.html#method-i-substract","(other)","<p>nil-sicheres subtrahieren\n"],["sum","NilClass","NilClass.html#method-i-sum","()",""],["summation","EnumerableNumerics","EnumerableNumerics.html#method-i-summation","()","<p>Summe\n<p>Methode darf nicht sum heißen, kollidiert sonst schnell mit ActiveRecord.\nTests and examples see …\n"],["summation","NilClass","NilClass.html#method-i-summation","()",""],["tally_calls","CallTracker","CallTracker.html#method-i-tally_calls","(event, file, line, symbol, binding, klass)","<p>If the interpreter is about to call a method we find interesting, increment\nthe count for that method. …\n"],["test_010_anti","TestKyaniteStringNested","TestKyaniteStringNested.html#method-i-test_010_anti","()",""],["test_01_prd","TestKyaniteEnumerableNumerics","TestKyaniteEnumerableNumerics.html#method-i-test_01_prd","()",""],["test_01_sum","TestKyaniteEnumerableNumerics","TestKyaniteEnumerableNumerics.html#method-i-test_01_sum","()",""],["test_020_index_bracket","TestKyaniteStringNested","TestKyaniteStringNested.html#method-i-test_020_index_bracket","()",""],["test_030_mask_ungeklammert","TestKyaniteStringNested","TestKyaniteStringNested.html#method-i-test_030_mask_ungeklammert","()",""],["test_040_mask_eine_klammer","TestKyaniteStringNested","TestKyaniteStringNested.html#method-i-test_040_mask_eine_klammer","()",""],["test_050_mask_zwei_klammern","TestKyaniteStringNested","TestKyaniteStringNested.html#method-i-test_050_mask_zwei_klammern","()",""],["test_060_mask_leer","TestKyaniteStringNested","TestKyaniteStringNested.html#method-i-test_060_mask_leer","()",""],["test_070_mask_start_mit_level_1","TestKyaniteStringNested","TestKyaniteStringNested.html#method-i-test_070_mask_start_mit_level_1","()",""],["test_080_mask_end_mit_level_1","TestKyaniteStringNested","TestKyaniteStringNested.html#method-i-test_080_mask_end_mit_level_1","()",""],["test_090_mask_multilevel","TestKyaniteStringNested","TestKyaniteStringNested.html#method-i-test_090_mask_multilevel","()",""],["test_0_und_1","TestKyaniteTrueFalse","TestKyaniteTrueFalse.html#method-i-test_0_und_1","()",""],["test_100_mask_with_brackets","TestKyaniteStringNested","TestKyaniteStringNested.html#method-i-test_100_mask_with_brackets","()",""],["test_array_diff","TestKyaniteArray","TestKyaniteArray.html#method-i-test_array_diff","()",""],["test_array_shift_complement","TestKyaniteArray","TestKyaniteArray.html#method-i-test_array_shift_complement","()",""],["test_avg","TestKyaniteEnumerableNumerics","TestKyaniteEnumerableNumerics.html#method-i-test_avg","()",""],["test_basics","TestKyaniteOptimizer","TestKyaniteOptimizer.html#method-i-test_basics","()",""],["test_blank","TestKyaniteObject","TestKyaniteObject.html#method-i-test_blank","()",""],["test_camelcase","TestKyaniteStringChars","TestKyaniteStringChars.html#method-i-test_camelcase","()",""],["test_capitalize","TestKyaniteStringChars","TestKyaniteStringChars.html#method-i-test_capitalize","()",""],["test_capitalized?","TestKyaniteStringChars","TestKyaniteStringChars.html#method-i-test_capitalized-3F","()",""],["test_compact","TestKyaniteHash","TestKyaniteHash.html#method-i-test_compact","()",""],["test_contentclass_mono","TestKyaniteEnumerableStructure","TestKyaniteEnumerableStructure.html#method-i-test_contentclass_mono","()",""],["test_contentclass_multi","TestKyaniteEnumerableStructure","TestKyaniteEnumerableStructure.html#method-i-test_contentclass_multi","()",""],["test_contentclass_set_and_hash","TestKyaniteEnumerableStructure","TestKyaniteEnumerableStructure.html#method-i-test_contentclass_set_and_hash","()",""],["test_create","TestKyaniteDictionary","TestKyaniteDictionary.html#method-i-test_create","()",""],["test_cut","TestKyaniteStringSplit","TestKyaniteStringSplit.html#method-i-test_cut","()",""],["test_delete","TestKyaniteHash","TestKyaniteHash.html#method-i-test_delete","()","<p>Rubys <code>delete</code> verändert den Hash!\n"],["test_diff","TestKyaniteStringDiff","TestKyaniteStringDiff.html#method-i-test_diff","()",""],["test_distribution_class","TestKyaniteEnumerableStructure","TestKyaniteEnumerableStructure.html#method-i-test_distribution_class","()",""],["test_distribution_size","TestKyaniteEnumerableStructure","TestKyaniteEnumerableStructure.html#method-i-test_distribution_size","()",""],["test_downcase_upcase","TestKyaniteStringChars","TestKyaniteStringChars.html#method-i-test_downcase_upcase","()",""],["test_each","TestKyaniteDictionary","TestKyaniteDictionary.html#method-i-test_each","()",""],["test_each","TestKyaniteSet","TestKyaniteSet.html#method-i-test_each","()",""],["test_equal","TestKyaniteSet","TestKyaniteSet.html#method-i-test_equal","()",""],["test_equal_2","TestKyaniteSet","TestKyaniteSet.html#method-i-test_equal_2","()","<p>expected = [[:c], [:eins, :zwei], [:a, :b], [:drei]].to_set_of_sets\nassert_equal expected,  [[:eins, …\n"],["test_fehlerhalte_matrix","TestKyaniteMatrix2","TestKyaniteMatrix2.html#method-i-test_fehlerhalte_matrix","()","<p>Matrix mit Fehlern testen\n"],["test_fixsize","TestKyaniteStringSplit","TestKyaniteStringSplit.html#method-i-test_fixsize","()",""],["test_german_sz","TestKyaniteStringChars","TestKyaniteStringChars.html#method-i-test_german_sz","()",""],["test_hash","TestKyaniteSet","TestKyaniteSet.html#method-i-test_hash","()",""],["test_index","TestKyaniteSet","TestKyaniteSet.html#method-i-test_index","()",""],["test_insert","TestKyaniteDictionary","TestKyaniteDictionary.html#method-i-test_insert","()",""],["test_integer_triviales","TestKyaniteNumeric","TestKyaniteNumeric.html#method-i-test_integer_triviales","()","<p>Tests for Integer\n"],["test_invert","TestKyaniteRange","TestKyaniteRange.html#method-i-test_invert","()",""],["test_is_collection","TestKyaniteDictionary","TestKyaniteDictionary.html#method-i-test_is_collection","()",""],["test_is_collection","TestKyaniteEnumerableStructure","TestKyaniteEnumerableStructure.html#method-i-test_is_collection","()",""],["test_is_collection","TestKyaniteSet","TestKyaniteSet.html#method-i-test_is_collection","()",""],["test_is_numeric","TestKyaniteObject","TestKyaniteObject.html#method-i-test_is_numeric","()",""],["test_leer","TestKyaniteOptimizer","TestKyaniteOptimizer.html#method-i-test_leer","()",""],["test_list_with_mit_block","TestKyaniteStringList","TestKyaniteStringList.html#method-i-test_list_with_mit_block","()",""],["test_list_with_ohne_block","TestKyaniteStringList","TestKyaniteStringList.html#method-i-test_list_with_ohne_block","()",""],["test_matrix_zellen_und_zeilen","TestKyaniteMatrix2","TestKyaniteMatrix2.html#method-i-test_matrix_zellen_und_zeilen","()","<p>Normale Matrix testen: Zellen und Zeilen\n"],["test_mean_harmonic","TestKyaniteEnumerableNumerics","TestKyaniteEnumerableNumerics.html#method-i-test_mean_harmonic","()",""],["test_merge","TestKyaniteDictionary","TestKyaniteDictionary.html#method-i-test_merge","()",""],["test_mgsub","TestKyaniteStringMgsub","TestKyaniteStringMgsub.html#method-i-test_mgsub","()",""],["test_nchar","TestKyaniteStringSplit","TestKyaniteStringSplit.html#method-i-test_nchar","()",""],["test_nil_patches","TestKyaniteNil","TestKyaniteNil.html#method-i-test_nil_patches","()",""],["test_op_store","TestKyaniteDictionary","TestKyaniteDictionary.html#method-i-test_op_store","()",""],["test_order_by","TestKyaniteDictionary","TestKyaniteDictionary.html#method-i-test_order_by","()",""],["test_ordered_set","TestKyaniteSet","TestKyaniteSet.html#method-i-test_ordered_set","()","<p>behält die Reihenfolge\n"],["test_overlap","TestKyaniteStringDiff","TestKyaniteStringDiff.html#method-i-test_overlap","()",""],["test_overlapdiff","TestKyaniteStringDiff","TestKyaniteStringDiff.html#method-i-test_overlapdiff","()",""],["test_palindrom_rumpf","TestKyaniteEnumerableStrings","TestKyaniteEnumerableStrings.html#method-i-test_palindrom_rumpf","()",""],["test_parallel","TestKyaniteEnumerableNumerics","TestKyaniteEnumerableNumerics.html#method-i-test_parallel","()",""],["test_push","TestKyaniteDictionary","TestKyaniteDictionary.html#method-i-test_push","()",""],["test_range","TestKyaniteOptimizer","TestKyaniteOptimizer.html#method-i-test_range","()",""],["test_raumschiff_operator","TestKyaniteTrueFalse","TestKyaniteTrueFalse.html#method-i-test_raumschiff_operator","()",""],["test_rectangle1","TestKyaniteEnumerableEnumerables","TestKyaniteEnumerableEnumerables.html#method-i-test_rectangle1","()",""],["test_rectangle2","TestKyaniteEnumerableEnumerables","TestKyaniteEnumerableEnumerables.html#method-i-test_rectangle2","()",""],["test_reduce53_a","TestKyaniteStringChars","TestKyaniteStringChars.html#method-i-test_reduce53_a","()",""],["test_reduce53_b","TestKyaniteStringChars","TestKyaniteStringChars.html#method-i-test_reduce53_b","()",""],["test_reduce53_c","TestKyaniteStringChars","TestKyaniteStringChars.html#method-i-test_reduce53_c","()",""],["test_reduce53_d","TestKyaniteStringChars","TestKyaniteStringChars.html#method-i-test_reduce53_d","()",""],["test_reduce53_e","TestKyaniteStringChars","TestKyaniteStringChars.html#method-i-test_reduce53_e","()",""],["test_reduce94_a","TestKyaniteStringChars","TestKyaniteStringChars.html#method-i-test_reduce94_a","()",""],["test_reduce94_b","TestKyaniteStringChars","TestKyaniteStringChars.html#method-i-test_reduce94_b","()",""],["test_reduce94_c","TestKyaniteStringChars","TestKyaniteStringChars.html#method-i-test_reduce94_c","()",""],["test_reduce94_e","TestKyaniteStringChars","TestKyaniteStringChars.html#method-i-test_reduce94_e","()",""],["test_reduce94_f","TestKyaniteStringChars","TestKyaniteStringChars.html#method-i-test_reduce94_f","()",""],["test_reduce94_full","TestKyaniteStringChars","TestKyaniteStringChars.html#method-i-test_reduce94_full","()",""],["test_rephrase_index","TestKyaniteArray","TestKyaniteArray.html#method-i-test_rephrase_index","()",""],["test_resize_to_header","TestKyaniteMatrix2","TestKyaniteMatrix2.html#method-i-test_resize_to_header","()","<p>Normale Matrix testen: resize_to_header\n"],["test_set","TestKyaniteSet","TestKyaniteSet.html#method-i-test_set","()","<p>ungeordnet\n"],["test_slice","TestKyaniteHash","TestKyaniteHash.html#method-i-test_slice","()",""],["test_sorted_set","TestKyaniteSet","TestKyaniteSet.html#method-i-test_sorted_set","()","<p>sortiert\n"],["test_spalten","TestKyaniteMatrix2","TestKyaniteMatrix2.html#method-i-test_spalten","()","<p>Normale Matrix testen: Spalten\n"],["test_split_by_index","TestKyaniteStringSplit","TestKyaniteStringSplit.html#method-i-test_split_by_index","()",""],["test_split_numeric","TestKyaniteStringSplit","TestKyaniteStringSplit.html#method-i-test_split_numeric","()",""],["test_to_class","TestKyaniteClassutils","TestKyaniteClassutils.html#method-i-test_to_class","()",""],["test_to_classname","TestKyaniteClassutils","TestKyaniteClassutils.html#method-i-test_to_classname","()",""],["test_to_dictionary","TestKyaniteDictionary","TestKyaniteDictionary.html#method-i-test_to_dictionary","()",""],["test_to_identifier","TestKyaniteStringCast","TestKyaniteStringCast.html#method-i-test_to_identifier","()",""],["test_to_integer","TestKyaniteStringCast","TestKyaniteStringCast.html#method-i-test_to_integer","()",""],["test_to_integer_optional","TestKyaniteStringCast","TestKyaniteStringCast.html#method-i-test_to_integer_optional","()",""],["test_to_nil","TestKyaniteStringCast","TestKyaniteStringCast.html#method-i-test_to_nil","()",""],["test_update","TestKyaniteDictionary","TestKyaniteDictionary.html#method-i-test_update","()",""],["test_utf8_size","TestKyaniteStringChars","TestKyaniteStringChars.html#method-i-test_utf8_size","()",""],["test_without_versioninfo","TestKyaniteStringSplit","TestKyaniteStringSplit.html#method-i-test_without_versioninfo","()",""],["to_a","OrderedSet","OrderedSet.html#method-i-to_a","()","<p>Liefert ein entsprechendes Array. Diese Methode ist schnell. Es muss nichts\numgeformt werden. Andere …\n"],["to_array_of_enumerables","Array","Array.html#method-i-to_array_of_enumerables","()","<p>Liefert ein ArrayOfEnumerables (das ist ein Array mit inkludiertem Modul\nEnumerableEnumerables)\n"],["to_array_of_numerics","Array","Array.html#method-i-to_array_of_numerics","()","<p>Liefert ein ArrayOfNumerics (das ist ein Array mit inkludiertem Modul\nEnumerableNumerics)\n"],["to_array_of_strings","Array","Array.html#method-i-to_array_of_strings","()","<p>Liefert ein ArrayOfStrings (das ist ein Array mit inkludiertem Modul\nEnumerableStrings)\n"],["to_class","Class","Class.html#method-i-to_class","()","<p>Die Methode to_class wandelt einen Klassennamen in eine Klasse. Die Methode\ngibt es insbesondere für …\n"],["to_class","NilClass","NilClass.html#method-i-to_class","()",""],["to_class","String","String.html#method-i-to_class","()","<p>Wandelt einen Klassennamen in eine Klasse. Akzeptiert sowohl CamelCase als\nauch down_case. Die Methode …\n"],["to_class","Symbol","Symbol.html#method-i-to_class","()","<p>Wandelt einen Klassennamen in eine Klasse. Akzeptiert sowohl CamelCase als\nauch down_case. Die Methode …\n"],["to_classname","Class","Class.html#method-i-to_classname","()","<p>Gegenstück zu to_class:  Wandelt eine Klasse in einen Klassennamen um, der\nnur Kleinbuchstaben enthält. …\n"],["to_classname","NilClass","NilClass.html#method-i-to_classname","()","<p>Rückgabe: Leerer String\n"],["to_classname","String","String.html#method-i-to_classname","()","<p>Wandelt einen String in einen Klassennamen, der nur Kleinbuchstaben\nenthält.\n\n<pre>'MeinModul::EineKlasse' ...</pre>\n"],["to_classname","Symbol","Symbol.html#method-i-to_classname","()","<p>Wandelt ein Symbol in einen Klassennamen, der nur Kleinbuchstaben enthält. \nSiehe String#to_classname …\n"],["to_dictionary","Array","Array.html#method-i-to_dictionary","()","<p>Liefert ein Dictionary (das ist ein geordneter Hash)\n<p>TODO: effizienter\n"],["to_dictionary","Hash","Hash.html#method-i-to_dictionary","()","<p>TODO: effizienter\n"],["to_dictionary","NilClass","NilClass.html#method-i-to_dictionary","()","<p>Rückgabe: Leeres Dictionary\n"],["to_i","FalseClass","FalseClass.html#method-i-to_i","()","<p>Rückgabe: 0\n"],["to_i","NilClass","NilClass.html#method-i-to_i","()",""],["to_i","TrueClass","TrueClass.html#method-i-to_i","()","<p>Rückgabe: 1\n"],["to_identifier","NilClass","NilClass.html#method-i-to_identifier","()",""],["to_identifier","String","String.html#method-i-to_identifier","()","<p>Wandelt einen String in den plausibelsten Identifier um:\n\n<pre>self.strip.to_integer_optional</pre>\n<p>Tests &amp; Beispiele …\n"],["to_integer","Integer","Integer.html#method-i-to_integer","()","<p>Rückgabe: self\n<p>Test: TestKyaniteNumeric#test_integer_triviales\n"],["to_integer","NilClass","NilClass.html#method-i-to_integer","()",""],["to_integer","String","String.html#method-i-to_integer","()","<p>Wandelt einen String in einen Integer, auch dann, wenn die Zahl hinten\nangehängt wurde. Im Gegensatz …\n"],["to_integer_optional","Integer","Integer.html#method-i-to_integer_optional","()","<p>Rückgabe: self\n<p>Test: TestKyaniteNumeric#test_integer_triviales\n"],["to_integer_optional","NilClass","NilClass.html#method-i-to_integer_optional","()",""],["to_integer_optional","String","String.html#method-i-to_integer_optional","()","<p>Wandelt einen String in einen Integer. Im Gegensatz zu to_i wird self\nzurückgegeben, wenn der String …\n"],["to_nil","NilClass","NilClass.html#method-i-to_nil","()",""],["to_nil","Numeric","Numeric.html#method-i-to_nil","(*args)","<p>Wandelt 0 in nil um\n"],["to_nil","Object","Object.html#method-i-to_nil","(condition = :empty)","<p>Liefert nil, wenn die Condition erfüllt ist. Sonst self.\n"],["to_nil","String","String.html#method-i-to_nil","()",""],["to_nil_unless","NilClass","NilClass.html#method-i-to_nil_unless","(*a)",""],["to_nil_unless","Object","Object.html#method-i-to_nil_unless","(condition = :empty)","<p>Liefert nil, wenn die Condition nicht erfüllt ist. Sonst self.\n"],["to_ordered_set","Array","Array.html#method-i-to_ordered_set","()","<p>Liefert ein OrderedSet, das dem Array entspricht.  Übersicht über die\nverschiedenen Set-Klassen siehe …\n"],["to_ordered_set","NilClass","NilClass.html#method-i-to_ordered_set","()","<p>Rückgabe: Leeres OrderedSet\n"],["to_s","Tree::TreeNode","Tree/TreeNode.html#method-i-to_s","()","<p>kann jetzt auch mit Symbolen umgehen\n"],["to_set","NilClass","NilClass.html#method-i-to_set","()","<p>Rückgabe: Leeres Set\n"],["to_set","Object","Object.html#method-i-to_set","()","<p>Liefert ein Set mit einem Element\n"],["to_sorted_set","Array","Array.html#method-i-to_sorted_set","()","<p>Liefert ein SortedSet, das dem Array entspricht.  Übersicht über die\nverschiedenen Set-Klassen siehe …\n"],["to_sorted_set","NilClass","NilClass.html#method-i-to_sorted_set","()","<p>Rückgabe: Leeres SortedSet\n"],["to_sorted_set","SortedSet","SortedSet.html#method-i-to_sorted_set","()",""],["to_sym","NilClass","NilClass.html#method-i-to_sym","()",""],["to_time","Integer","Integer.html#method-i-to_time","()","<p>Wandelt eine Sekundenzahl-seit-1970 in ein Time-Objekt\n"],["to_time","NilClass","NilClass.html#method-i-to_time","()",""],["to_x","NilClass","NilClass.html#method-i-to_x","()",""],["to_x","String","String.html#method-i-to_x","()","<p>Get a hex representation for a char. See also String#from_x.\n"],["transpose","NilClass","NilClass.html#method-i-transpose","()",""],["transpose!","Enumerable","Enumerable.html#method-i-transpose-21","()","<p>In-place-Variante von transpose.\n"],["transpose!","NilClass","NilClass.html#method-i-transpose-21","()",""],["umbrella","NilClass","NilClass.html#method-i-umbrella","(*a)",""],["underscore","NilClass","NilClass.html#method-i-underscore","()",""],["underscore","String","String.html#method-i-underscore","()","<p>The reverse of <code>camelize</code>. Makes an underscored, lowercase form\nfrom the expression in the string. Changes …\n"],["uniq","NilClass","NilClass.html#method-i-uniq","()",""],["uniq!","NilClass","NilClass.html#method-i-uniq-21","()",""],["unshift","Dictionary","Dictionary.html#method-i-unshift","( k,v )",""],["upcase2","NilClass","NilClass.html#method-i-upcase2","()",""],["upcase2","String","String.html#method-i-upcase2","()","<p>Ein Überschreiben von upcase führt in Kombination mit ActiveSupport zu\nseltsamen Ergebnissen!\n"],["upcase2!","NilClass","NilClass.html#method-i-upcase2-21","()",""],["upcase2!","String","String.html#method-i-upcase2-21","()",""],["upcase?","String","String.html#method-i-upcase-3F","()",""],["within?","NilClass","NilClass.html#method-i-within-3F","(*a)",""],["without_versioninfo","NilClass","NilClass.html#method-i-without_versioninfo","()",""],["without_versioninfo","String","String.html#method-i-without_versioninfo","()","<p>Trennt numerische Teile ab und entfernt abschließende Whitespaces,\nBindestriche, Unterstriche und Punkte …\n"],["Div","","Div.html","","<p> | Kyanite | Object | Array | Set | Enumerable | Hash |  &mdash; | Kyanite | TrueClass | FalseClass | NilClass …\n"],["History","","History_txt.html","","<p>0.5.5 2012-10-09\n<p>fixed missing file in Manifest.txt\n\n<p>0.5.4 2012-10-09\n"],["License","","License_txt.html","","<p>License For Kyanite\n<p>Creative Commons Attribution-Share Alike 3.0 Germany\n<p>(cc-by-sa) creativecommons.org/licenses/by-sa/3.0/de/deed.en …\n"],["README","","README_txt.html","","<p>Kyanite\n<p>bklippstein.github.com/kyanite/\n<p> | Kyanite | Object | Array | Set | Enumerable | Hash |  &mdash; | <strong>Kyanite</strong> …\n"]]}}